
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.metrics import f1_score
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('data/secom.csv')  # Placeholder CSV

# Drop NaNs
df.dropna(axis=1, thresh=0.6 * len(df), inplace=True)
df.dropna(inplace=True)

# Feature-target split
X = df.drop('fault_label', axis=1)
y = df['fault_label']

# Standardize
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Balance with SMOTE
smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X_scaled, y)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state=42)

# Models
rf = RandomForestClassifier().fit(X_train, y_train)
print("RF F1:", f1_score(y_test, rf.predict(X_test)))

xgb = XGBClassifier().fit(X_train, y_train)
print("XGB F1:", f1_score(y_test, xgb.predict(X_test)))

svc = SVC().fit(X_train, y_train)
print("SVC F1:", f1_score(y_test, svc.predict(X_test)))

# Clustering
kmeans = KMeans(n_clusters=2, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Plot clusters
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=clusters, cmap='viridis')
plt.title("K-Means Clustering")
plt.savefig("models/kmeans_clusters.png")
